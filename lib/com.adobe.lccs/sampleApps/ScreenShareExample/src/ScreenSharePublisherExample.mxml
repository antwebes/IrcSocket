<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
				xmlns:rtc="http://ns.adobe.com/rtc">
	<mx:Script>
		<![CDATA[
			import com.adobe.rtc.events.AddInLauncherEvent;
			import com.adobe.rtc.events.ScreenShareEvent;
			import com.adobe.rtc.events.StreamEvent;
			import com.adobe.rtc.sharedManagers.StreamManager;
			import com.adobe.rtc.sharedManagers.descriptors.UserDescriptor;
			/* import com.adobe.rtc.collaboration.ScreenSharePublisher;
			protected var _sspublisher:ScreenSharePublisher;
			
			public function init():void
			{
			
			/* launch it from actionscript
			_sspublisher = new ScreenSharePublisher();
			addChild(_sspublisher);
			
			_sspublisher.publish();
			
			//trace("streamManager: " + cSession.streamManager.sharedID);
			}
			*/
			private function startSS():void
			{
				if(sspublisher != null && !sspublisher.isPublishing) {
					sspublisher.addEventListener(StreamEvent.STREAM_RECEIVE, onStreamReceived);
					sspublisher.addEventListener(ScreenShareEvent.CONTROL_STARTED, onScreenControlStarted);
					sspublisher.addEventListener(ScreenShareEvent.CONTROL_STOPPED, onScreenControlStopped);
					sspublisher.addEventListener(AddInLauncherEvent.STOP, onAddinStop);
					sspublisher.addEventListener(StreamEvent.STREAM_DELETE, onStreamDelete);
					
					sspublisher.publish();
					startss_bt.enabled = false;
					stopss_bt.enabled = true;
					pause_bt.enabled = true;
					pause_bt.label = "Pause Screen Sharing";
				}
			}
			
			private function stopSS():void
			{
				if(sspublisher != null && sspublisher.isPublishing) {
					sspublisher.stop(publisherid.text);
					startss_bt.enabled = true;
					stopss_bt.enabled = false;
					pause_bt.enabled = false;
					publisherid.text = "";
					streamid.text = "";
				}
			}
			
			// addin cancelled
			private function onAddinStop(p_evt:AddInLauncherEvent):void{
				startss_bt.enabled = true;
				stopss_bt.enabled = false;
				pause_bt.enabled = false;
				publisherid.text = "";
				streamid.text = "";
			}
			
			private function pauseSS():void
			{
				if(sspublisher != null && sspublisher.isPublishing) {
					if(pause_bt.label == "Pause Screen Sharing") {
						sspublisher.pause(true);
						pause_bt.label = "Resume Screen Sharing";
					}
					else{
						sspublisher.pause(false);
						pause_bt.label = "Pause Screen Sharing";
					}
				}
			}
			
			private function onStreamDelete(p_evt:StreamEvent):void
			{
				var publisherDescriptor:UserDescriptor = null;
				
				if(p_evt.streamDescriptor.originalScreenPublisher != null)
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.originalScreenPublisher);
				else
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.streamPublisherID);
				
				var myDescriptor:UserDescriptor = cSession.userManager.getUserDescriptor(cSession.userManager.myUserID);
				
				if(p_evt.streamDescriptor.type == StreamManager.SCREENSHARE_STREAM) {
					if(publisherDescriptor.displayName == myDescriptor.displayName ||
						publisherDescriptor.userID.indexOf(myDescriptor.userID) >= 0){
				
						startss_bt.enabled = true;
						stopss_bt.enabled = false;
						pause_bt.enabled = false;
						stop_other_control.enabled = false;
						publisherid.text = "";
						streamid.text = "";
					}
				}
			}
			private function onStreamReceived(p_evt:StreamEvent):void
			{
				var publisherDescriptor:UserDescriptor = null;
				if(p_evt.streamDescriptor.originalScreenPublisher != null)
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.originalScreenPublisher);
				else
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.streamPublisherID);
				
				var myDescriptor:UserDescriptor = cSession.userManager.getUserDescriptor(cSession.userManager.myUserID);
				
				
				if(p_evt.streamDescriptor.type == StreamManager.SCREENSHARE_STREAM && publisherDescriptor != null) {
					if(publisherDescriptor.displayName == myDescriptor.displayName ||
						publisherDescriptor.userID.indexOf(myDescriptor.userID) >= 0){
						publisherid.text = p_evt.streamDescriptor.originalScreenPublisher;
						streamid.text = p_evt.streamDescriptor.id;
					}
				}
			}

			private function onScreenControlStarted(p_evt:ScreenShareEvent):void{
				stop_other_control.enabled = true;
			}
			private function onScreenControlStopped(p_evt:ScreenShareEvent):void{
				stop_other_control.enabled = false;
			}
			
			protected function stop_other_control_clickHandler(event:MouseEvent):void
			{
				if(sspublisher != null && sspublisher.isPublishing) {
					sspublisher.stopBeingControlled();
				}
			}

		]]>
	</mx:Script>
	
	<!-- 
	You would likely use external authentication here for a deployed application; 
	you would certainly not hard code Adobe IDs here.
	-->
	<rtc:AdobeHSAuthenticator 
		id="auth" userName="Your Username" password="Your password"/>

	
	<rtc:ConnectSessionContainer backgroundAlpha="0.0" roomURL="Your RoomUrl" id="cSession" authenticator="{auth}" width="100%" height="100%"> 
		<mx:Canvas width="100%" height="100%"> 
			<rtc:ScreenSharePublisher id="sspublisher" playerVersion="10"/>
			<mx:VBox width="100%" height="100%" horizontalAlign="center">
				<mx:VBox width="50%" height="50%"  horizontalAlign="center" verticalAlign="middle">
					<mx:Label text="Stream ID:"/><mx:TextInput id="streamid" text=""/>
					<mx:Label text="Publisher User ID:"/><mx:TextInput id="publisherid" text=""/>
				</mx:VBox>
				<mx:HBox width="50%" height="50%" horizontalAlign="center" verticalAlign="middle">
					<mx:Button id="startss_bt" label="Start Screen Sharing" click="startSS()"/>
					<mx:Button id="pause_bt" label="Pause Screen Sharing" click="pauseSS()" enabled="false"/>
					<mx:Button id="stopss_bt" label="Stop Screen Sharing" click="stopSS()" enabled="false"/>
					<mx:Button id="stop_other_control" label="Stop Other Control Your Screen" click="stop_other_control_clickHandler(event)" enabled="false"/>
				</mx:HBox>
			</mx:VBox> 
		</mx:Canvas> 
	</rtc:ConnectSessionContainer> 
	
</mx:Application>
