<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:display="flash.display.*" layout="absolute" xmlns:rtc="http://ns.adobe.com/rtc" xmlns:containers="com.dougmccune.containers.*" resize="application_resize(event);">
<!-- THIS APP WOULD WORK ONLY WITH FLASH PLAYER 10 SWC
     This example demonstrates how you can leverage our framework for uploading and viewing images 
     collaboratively. This app also shows how you can select an image and do whiteboarding on that image.  
     After uploading an image, please select the image to do double click on the background to get the whiteboard
     and then you can draw shapes and figures on top of it.
-->
<mx:Script>
	<![CDATA[
		import mx.events.ResizeEvent;
		import com.adobe.rtc.messaging.UserRoles;
		import com.adobe.rtc.sharedManagers.UserManager;
		import com.adobe.rtc.session.ConnectSession;
			import mx.containers.Panel;
			import com.adobe.rtc.util.RootCollectionNode;
			import mx.managers.CursorManager;
			import flash.text.engine.BreakOpportunity;
			import mx.events.CollectionEventKind;
			import com.adobe.rtc.messaging.MessageItem;
			import mx.core.UIComponent;
			import com.adobe.rtc.events.SharedModelEvent;
			import mx.containers.Canvas;
			import mx.events.CollectionEvent;
			import com.adobe.rtc.sharedModel.SharedCollection;
			import mx.events.ItemClickEvent;
			import mx.collections.ArrayCollection;
			import com.adobe.rtc.events.SessionEvent;
			import mx.events.ListEvent;
			import com.adobe.rtc.events.SharedPropertyEvent;
			import com.adobe.rtc.sharedManagers.descriptors.FileDescriptor;
			import com.adobe.rtc.events.CollectionNodeEvent;
			import com.adobe.rtc.sharedModel.CollectionNode;
			import com.adobe.rtc.sharedModel.SharedProperty;
			
			/**********************************************************
			 * ADOBE SYSTEMS INCORPORATED
			 * Copyright [2007-2010] Adobe Systems Incorporated
			 * All Rights Reserved.
			 * NOTICE: Adobe permits you to use, modify, and distribute this file in accordance with the 
			 * terms of the Adobe license agreement accompanying it. ?If you have received this file from a 
			 * source other than Adobe, then your use, modification, or distribution of it requires the prior 
			 * written permission of Adobe.
	  		 * *********************************/


			protected var _collectionNode:CollectionNode;
			[Bindable]
			protected var _sharedProperty:SharedProperty;
			[Bindable]
			protected var _fileGridDescriptors:ArrayCollection=new ArrayCollection();
			protected var _sharedCollection:SharedCollection;
			protected var _fileUtil:FileUtil;
			protected var _originalImageHeight:Number;
			protected var _originalImageWidth:Number;
			protected var _timer:Timer = new Timer(100);
			protected var _imageLoaded:Boolean = false;

			/**
			* Mother of this app :)
			* All the nodes needed for this room are created if they don't exist. 
			* NOTE: THIS APP WORKS ONLY WITH FLASH PLAYER 10 :(
			*/
			protected function init():void 
			{
				if (roomConnector.isSynchronized) {
					_collectionNode=new CollectionNode();
					_collectionNode.connectSession=roomConnector;
					_collectionNode.sharedID="tmpCollectionNode";
					//Shared Property. It is used to share the image URL and thumbnail_index of the coverflow
					_sharedProperty=new SharedProperty();
					_sharedProperty.collectionNode=_collectionNode;
					_sharedProperty.connectSession=roomConnector;
					_sharedProperty.addEventListener(SharedPropertyEvent.CHANGE, changeCanvas);
					//_sharedProperty.addEventListener(CollectionNodeEvent.SYNCHRONIZATION_CHANGE,setSelectedItemIndex);
					//Shared Collection is used to hold all the bitMap data of all the thumbnails and is updated when a user
					//deletes or uploads an image
					_sharedCollection=new SharedCollection();
					_sharedCollection.collectionNode=_collectionNode;
					_sharedCollection.connectSession=roomConnector;
					_sharedCollection.idField="fileName";
					_sharedCollection.nodeName="thumbNailNode";
					_sharedCollection.sharedID="thumbNails";
					_sharedCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE, onCollectionChange);
					//Subscribe to your collection nodes that does the magic :)
					_collectionNode.subscribe();
					_sharedProperty.subscribe();
					_sharedCollection.subscribe();
					// A simple file utility that would take care of upload, download and deletion of file and also generate a thumbnail
					_fileUtil=new FileUtil(_sharedCollection);
					_fileUtil.initializeUtil(roomConnector);
					_fileGridDescriptors=_fileUtil.fileGrid;
					vBox.visible=true;
					image.addEventListener(Event.COMPLETE, onImageLoad);
					_timer.addEventListener(TimerEvent.TIMER, onWindowResize);
					//Auto Promote users. Promote users to the level of participant. Not a critical app... So no harm promoting them
					if (ConnectSession.primarySession.userManager.myUserRole == UserRoles.OWNER) {
						autoPromoteUsers();
					}
				}
			}

			/**
			* Add a thumbnail to the coverFlow if a user uploads a image. The thumbnail is constructed from the sharedItems[index] bitmapdata
			* Also a thumbnail is deleted when an image is deleted by the room user.  
			*/
			protected function onCollectionChange(p_collectionEvent:CollectionEvent):void 
			{
				//log("Collection Change");
				var sharedItem:Object=p_collectionEvent.items[0];
				if (p_collectionEvent.kind == CollectionEventKind.ADD) {
					// Add a thumbnail to the coverflow
					var bitMapData:BitmapData=new BitmapData(Number(sharedItem.width), Number(sharedItem.height));
					var byteArray:ByteArray=ByteArray(sharedItem.bitMapData);
					var bitMap:Bitmap=new Bitmap(toBitmapData(bitMapData.width, bitMapData.height, byteArray));
					var myPanel:Panel=new Panel();
					myPanel.height=80;
					myPanel.width=128;
					myPanel.setStyle("headerHeight",0);
					myPanel.setStyle("borderThicknessBottom",0);
					myPanel.setStyle("borderThicknessLeft",0);
					myPanel.setStyle("borderThicknessRight",0);
					myPanel.setStyle("borderThicknessTop",0);

					var panelImage:Image=new Image();
					panelImage.source=bitMap;
					panelImage.percentHeight=100;
					panelImage.percentWidth=100;
					myPanel.addChild(panelImage);
					myPanel.name=myPanel.id=panelImage.name=panelImage.id=sharedItem.fileName;
					panelImage.addEventListener(MouseEvent.CLICK, updateSharedValue);
					coverflow.addChild(myPanel);
					scrollbar.maxScrollPosition=coverflow.numChildren - 1;
				} else if (p_collectionEvent.kind == CollectionEventKind.REMOVE) {
					coverflow.removeChild(coverflow.getChildByName(sharedItem.fileName));
					scrollbar.maxScrollPosition=coverflow.numChildren - 1;
				}
			}

			/**
			*Update the index and the fileURL when an image on the coverflow is clicked
			*The changes are automatically broadcasted to all the room users as we use a shared Property.  
			*/
			protected function updateSharedValue(p_event:MouseEvent):void 
			{
				//log("clicked thumbnail");
				var fileName:String=p_event.currentTarget.name;
				var fileDescriptor:FileDescriptor=getFileDescriptor(fileName);
				var ticket_token:String="?mst=" + roomConnector.userManager.myTicket + "&token=" + fileDescriptor.token;
				var urlRequest:URLRequest=new URLRequest(fileDescriptor.url + fileDescriptor.filename + ticket_token);
				var sharedObject:Object=new Object();
				sharedObject["url"]=urlRequest.url;
				sharedObject["selectedItemIndex"]=coverflow.selectedIndex;
				_sharedProperty.value=sharedObject;
			}

			/**
			* Changing the background image as each user clicks an image on the coverflow.( in other words
			* when the sharedProperty value is modified ) 
			*/
			protected function changeCanvas(p_event:SharedPropertyEvent):void 
			{
				log("updating shared property");
				if (_sharedProperty.value != null) {
					coverflow.selectedIndex=_sharedProperty.value["selectedItemIndex"];
					if (!image.source || (image.source !=_sharedProperty.value["url"])) {
						image.source=_sharedProperty.value["url"];
						_imageLoaded = false;
						sharedWhiteBoard.visible = false;
						scrollbar.scrollPosition=coverflow.selectedIndex;
					}
				} else {
					image.source= null;
					scrollbar.scrollPosition = coverflow.numChildren - 1;
				}
			}

			/**
			* Invoking Fileutil functions to upload and remove a file. 
			*/
			protected function clickHandler(p_event:ItemClickEvent):void 
			{
				if (p_event.label == "Add") {
					_fileUtil.upload();
				} else if (p_event.label == "Remove") {
					if(_sharedProperty.value != null) {
						var tmpIndex:int=_sharedProperty.value["selectedItemIndex"];
						var fileDescriptor:FileDescriptor=getFileDescriptor(_sharedCollection[tmpIndex].fileName);
						_sharedProperty.value=null;
						image.source = null;
						_fileUtil.deleteFile(fileDescriptor);
					}
				}
			}

			/**
			* Convert the byteArray data to Bitmap data 
			*/
			protected static function toBitmapData(p_width:Number, p_height:Number, p_byteArray:ByteArray):BitmapData 
			{
				var bitMapData:BitmapData=new BitmapData(p_width, p_height);
				p_byteArray.position=0;
				for(var i:uint=0; i < bitMapData.width; i++) {
					for(var j:uint=0; j < bitMapData.height; j++) {
						bitMapData.setPixel(i, j, p_byteArray.readUnsignedInt());
					}
				}
				return bitMapData;
			}

			/**
			* A utility function that returns the filedescriptor of the file given the fileName
			*/
			protected function getFileDescriptor(p_fileName:String):FileDescriptor 
			{
				var fileDescriptor:FileDescriptor;
				for(var i:int=0; i < _fileGridDescriptors.length; i++) {
					if (_fileGridDescriptors[i].id == p_fileName) {
						fileDescriptor=_fileGridDescriptors[i]as FileDescriptor;
						break;
					}
				}
				return fileDescriptor;
			}


			/**
			* Custome Log Function
			*/
			protected function log(p_traceString:String):void 
			{
				trace("******" + "\t\tCollabpic viewer  " + p_traceString + "\t********");
			}
			
			/**
		    * Clear the WhiteBoard. We use the WhiteBoard model's removeAllShapes method that does a clean job of clearing all the
        	* shapes that room users created.
			*/
			protected function clearWhiteBoard():void
			{
				sharedWhiteBoard.model.removeAllShapes();
			}
			
			/**
		    * Auto Promote users. Promote users to the level of participant. Not a critical app... So no harm promoting them
			*/
			protected function autoPromoteUsers():void
			{
				// I am basically promoting all the users entering the room to enable every participant to upload, delete and navigate images
				ConnectSession.primarySession.roomManager.autoPromote = true;
			}
			
			
			/**
		    * Scale the whiteBoard to the images contentWidth & contentHeight using WhiteBoards zoom level.
			*/
			protected function onImageLoad(p_evt:Event):void
			{
				_originalImageHeight = p_evt.currentTarget.contentHeight;
		    	_originalImageWidth = p_evt.currentTarget.contentWidth;
		    	image.maxHeight = _originalImageHeight;
				image.maxWidth = _originalImageWidth;
				_imageLoaded = true;
				if (sharedWhiteBoard) {
						sharedWhiteBoard.width = image.contentWidth;
						sharedWhiteBoard.height = image.contentHeight;
						sharedWhiteBoard.zoomLevel = image.contentWidth/_originalImageWidth;
						sharedWhiteBoard.visible = true;
				}
			}
			
			/**
		    * Catches the event whenever the application window resizes. and triggers a timer.
		    * When the timer expires the dimensions of the sharedWhiteBoard are updated according the new application window dimensions
			*/
			protected function application_resize(p_evt:ResizeEvent):void {
				if (_timer.running) {
					_timer.reset();
					_timer.start();
				} else {
					_timer.start();
				}
			}
			
			/**
		    * Scale the whiteBoard to the images contentWidth & contentHeight using WhiteBoards zoom level.
		    * The method is invoked by a timer whenever a window resizes
			*/
			protected function onWindowResize(p_evt:TimerEvent):void {
				if (sharedWhiteBoard && _imageLoaded) {
					sharedWhiteBoard.width = image.contentWidth;
					sharedWhiteBoard.height = image.contentHeight;
					sharedWhiteBoard.zoomLevel = image.contentWidth/_originalImageWidth;
					_timer.reset();
				}
			}		
	]]>
</mx:Script>

	<mx:Fade id="fadeIn" alphaFrom="0.0" alphaTo="1.0" />
    <mx:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0" />
	<rtc:AdobeHSAuthenticator id="ownerAuthenticator" userName="Your Username" password="Your password"/>
	<rtc:AdobeHSAuthenticator id="guestAuthenticator" />
	<!--
	 | LCCS application UI wrapped in ConnectSession
	 -->
	<rtc:ConnectSessionContainer id="roomConnector" borderStyle="none" authenticator="{ownerAuthenticator}" creationComplete="init()" roomURL="Your RoomUrl" width="100%" height="100%">
		<mx:VBox id="vBox" width="100%" height="100%" visible="false" backgroundColor="#505050">
			<mx:Canvas	id="canvas" height="85%" width="100%">
				<mx:Image id="image" height="100%" width="100%" />
		        <rtc:SharedWhiteBoard id="sharedWhiteBoard" width="{image.contentWidth}" height="{image.contentHeight}" backgroundAlpha="0.0" visible="false"/>
				<mx:ButtonBar id="buttonBar" itemClick="clickHandler(event)" x="{canvas.width-130}" y="{canvas.height-25}">
		            <mx:dataProvider>
		                <mx:Array>
		                    <mx:String>Add</mx:String>
		                    <mx:String>Remove</mx:String>
		                </mx:Array>
		            </mx:dataProvider>
		        </mx:ButtonBar>
		        <mx:Button id="clearWhiteBoardButton" x="{canvas.width-130}" y="0" label="clear" click="clearWhiteBoard()"/>
		    </mx:Canvas>
		    <mx:VBox height="15%" width="100%">
		    	<!-- CODE REUSED WITH MIT LICENSE : http://dougmccune.com/blog/2007/11/03/coverflow-flex-component/ -->
				<containers:CoverFlowContainer id="coverflow" width="100%" horizontalGap="40" borderStyle="inset" backgroundColor="0x353535" segments="6" reflectionEnabled="true"/>
				<mx:HScrollBar id="scrollbar" width="100%" pageSize="1" scroll="coverflow.selectedIndex = Math.round(scrollbar.scrollPosition)" />
		    </mx:VBox>						
		</mx:VBox>		
	</rtc:ConnectSessionContainer>
	<mx:Style source="UI.css"/>
</mx:Application>
