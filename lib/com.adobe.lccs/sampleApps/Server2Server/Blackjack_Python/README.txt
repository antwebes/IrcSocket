
This is a simple game of Blackjack where all the game logic is implemented as an web application that uses 
the LCCS Server2Server APIs.

The client application simply displayes the cards and send commands to the server.

Setup procedure:

For the client:
- create a Flex project (Web application) called Blackjack
- copy the "client/src" folder from this example in Blackjack/src (note: it
  contains on mxml file and an image folders with images for the table and the
  cards.
- In Blackjack.mxml, change the value of ROOM_URL to point to a new room in
  your developer account (i.e. the room "bj"). As an alternative you can also pass a "roomURL" parameter 
  in flashvars (or as parameter to the HTML page if you are using the HTML page generated by FlexBuilder
  using the associated index.template.html)
- Compile the project

For the server:
- install the pyamf Python module (http://pyamf.org). You can use the
  easy_setup tool as explained in ../../../serverIntegration/python/README.txt
- copy the files in the "server" folder on a server accessible from the
  internet
- Edit the file bjserver.py and update the following variables: 

  ACCOUNT       = "http://connectnow.next-dev.sflab.acrobat.com/<SDKACCOUNT>"
  USER          = "<SDKUSERNAME>"
  PASSWORD      = "<SDKPASSWORD>"
  HOOKURL       = "http://<THISSERVER>:8000"
  ROOM          = "bj"

That's all! After this you can run the bjserver.py script as:

  python bjserver.py

And then start the Flex client.

If everything is configured correctly you should see some activity in the
clients, and some log messages on the server side.


Again, in order for this example to work, the machine running the server needs
to be accessible from our servers, so the URL specified at HOOKURL needs to be
a valid DNS name or public IP address, and your firewall needs to allow
requests on port 8000.

Note that this example used the embedded web server provided by the WSGI
module so it's not suitable for production, but pyamf can be configured to use
different application servers that implement the WSGI interfaces.
