<?xml version="1.0" encoding="utf-8"?> 
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:rtc="http://ns.adobe.com/rtc"> 
	
	<mx:Script>
		<![CDATA[
			import com.adobe.rtc.events.CollectionNodeEvent;
			import mx.events.ScrollEvent;
			import com.adobe.rtc.sharedModel.descriptors.ChatMessageDescriptor;
			import com.adobe.rtc.events.ChatEvent;
			import com.adobe.rtc.sharedModel.SimpleChatModel;
			import mx.events.ScrollEventDetail;
			
			/**********************************************************
			 * ADOBE SYSTEMS INCORPORATED
			 * Copyright [2007-2010] Adobe Systems Incorporated
		         * All Rights Reserved.
			 * NOTICE: Adobe permits you to use, modify, and distribute this file in accordance with the 
			 * terms of the Adobe license agreement accompanying it.If you have received this file from a 
			 * source other than Adobe, then your use, modification, or distribution of it requires the prior 
			 * written permission of Adobe.
	  		 * *********************************/
			
			
			// This simple example just shows how this shared model can be made easily bindable for MXML.
			// See SimpleChatModel for details.
			
			[Bindable]
			public var chatModel:SimpleChatModel;
			protected function buildModel():void
			{
				// Create the model: just calling the constructor won't create the collection node or pass the messages.
				// Call subscribe and give it a shared ID while creating the model. 
				// The shared ID becomes the name of the collection node.
				chatModel = new SimpleChatModel();
				chatModel.sharedID = "myChat_SimpleChatModel";
				chatModel.subscribe();
				chatModel.addEventListener(ChatEvent.HISTORY_CHANGE, onChatMsg);
				chat_mesg_area.addEventListener(ScrollEvent.SCROLL,onHistoryScroll);
				this.addEventListener(KeyboardEvent.KEY_UP, onKeyStroke);
			}
			
			protected function submitChat(str:String):void
			{
				var cmd:ChatMessageDescriptor = new ChatMessageDescriptor();
				cmd.displayName = cSession.userManager.getUserDescriptor(cSession.userManager.myUserID).displayName;
				cmd.msg =  str;
				chatModel.sendMessage(cmd);
				chat_mesg_input.text = "";
			}
			
			protected function clearChat():void
			{
				chat_mesg_area.text = "";
				chatModel.clear();
			}
			
			protected function onChatMsg(p_evt:ChatEvent):void
			{
				if(p_evt.message != null && p_evt.message.msg != null && p_evt.message.displayName != null)
					chat_mesg_area.text += "\r\n" +  p_evt.message.displayName + ": " + p_evt.message.msg;
				else
					chat_mesg_area.text = "";
			}
			
			protected function onKeyStroke(p_evt:KeyboardEvent):void
			{
				if(p_evt.keyCode == Keyboard.ENTER) {
					submitChat(chat_mesg_input.text);
				} 
			}
			
			/**
			 * @private
			 */		
			protected function onHistoryScroll(p_evt:ScrollEvent):void
			{
				if ( chat_mesg_area ) {
					chat_mesg_area.verticalScrollPosition = chat_mesg_area.maxVerticalScrollPosition ;
				}
				
			}
			
		
			
		]]>
	</mx:Script>
	

	<!-- 
		You would likely use external authentication here for a deployed application; 
		you would certainly not hard code Adobe IDs here.
	-->
	<rtc:AdobeHSAuthenticator 
		id="auth" 
		userName="Your Username" 
		password="Your password"  />
		
	<rtc:ConnectSessionContainer roomURL="Your RoomUrl" id="cSession" authenticator="{auth}" width="100%" height="100%"> 
		<mx:Canvas width="100%" height="100%" creationComplete="buildModel()"> 
			<mx:VBox id="chatBox">
				<mx:TextArea width="800" height="500" id="chat_mesg_area"/>
				<mx:TextInput width="400" id="chat_mesg_input"/>
				<mx:HBox>
					<mx:Button label="Submit Chat" click="submitChat(chat_mesg_input.text)"/>
					<mx:Button label="Clear Chat" click="clearChat()"/>
				</mx:HBox>								
			</mx:VBox>
		</mx:Canvas> 
	</rtc:ConnectSessionContainer> 
</mx:Application> 
